name: Build and Push Docker Images to Both Registries
# 不用了
on:
  #push:
  #  paths:
  #    - '**/Dockerfile*'
  #    - '**/*.py'
  #    - '**/*.sh'
  workflow_dispatch:
  
env:
  DOCKER_NAMESPACE: ${{ secrets.DOCKER_NAMESPACE }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  GHCR_NAMESPACE: ${{ secrets.GHCR_NAMESPACE }}
  GHCR_PAT: ${{ secrets.GHCR_PAT }}
  # GHCR_ORG_NAMESPACE: ${{ vars.GHCR_ORG_NAMESPACE }}
  GHCR_ORG_NAMESPACE: ${{ secrets.GHCR_ORG_NAMESPACE }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        id: login_dockerhub
        if: env.HAS_DOCKER_CREDENTIALS == 'true'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKER_NAMESPACE }}
          password: ${{ env.DOCKER_PASSWORD }}
        env:
          HAS_DOCKER_CREDENTIALS: ${{ env.DOCKER_NAMESPACE && env.DOCKER_PASSWORD && 'true' || 'false' }}

      - name: Log in to GHCR
        id: login_GHCR
        #if: ${{  env.GHCR_NAMESPACE && env.GHCR_PAT && env.GHCR_ORG_NAMESPACE  }}
        if: env.HAS_GHCR_CREDENTIALS == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_NAMESPACE }} # **登录用户名**：使用 Secret
          password: ${{ env.GHCR_PAT }} # 使用 GHCR PAT Secret
        env:
          HAS_GHCR_CREDENTIALS: ${{ env.GHCR_NAMESPACE && env.GHCR_PAT && env.GHCR_ORG_NAMESPACE && 'true' || 'false' }} 

      - name: Detect changed services
        id: changes
        run: |
          git fetch origin ${{ github.event.before }}
          CHANGED_DIRS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | \
            awk -F/ '{print $1}' | sort -u)

          SERVICES=""
          for dir in $CHANGED_DIRS; do
            if ls "$dir"/Dockerfile* 1> /dev/null 2>&1; then
              SERVICES="$SERVICES $dir"
            fi
          done

          echo "services=$SERVICES" >> "$GITHUB_OUTPUT"

      - name: Build Docker images (with pushing)
        if: steps.changes.outputs.services != ''
        id: build_and_push
        run: |
          # 将 services 字符串转换成数组
          IFS=' ' read -r -a services_array <<< "${{ steps.changes.outputs.services }}"

          for dir in "${services_array[@]}"; do
            for file in "$dir"/Dockerfile*; do
              [ -f "$file" ] || continue
              base=$(basename "$file")
              service=$(basename "$dir")

              if [[ "$base" == "Dockerfile" ]]; then
                tag="latest"
              else
                tag="${base#Dockerfile_}"
              fi
              image_dockerhub="${{ env.DOCKER_NAMESPACE }}/$service:$tag"
              image_ghcr="ghcr.io/${{ env.GHCR_ORG_NAMESPACE }}/$service:$tag"

              echo "📦 Building $service:$tag from $file..."
              docker buildx build \
                --file "$file" \
                --platform linux/amd64,linux/arm64 \
                --cache-from type=gha,scope=$service \
                --cache-to type=gha,mode=max,scope=$service \
                --progress=plain \
                --push \
                -t "$image_dockerhub" \
                -t "$image_ghcr" \
                "$dir"
              IMAGES_PUSHED+=("$image_dockerhub")
              IMAGES_PUSHED+=("$image_ghcr")
            done
          done
          echo "all_pushed_images=${IMAGES_PUSHED[*]}" >> "$GITHUB_OUTPUT"


      - name: Show pushed images summary
        # 显示所有成功推送的镜像
        if: steps.build_and_push.outcome == 'success'
        run: |
          echo "--- 推送镜像列表 ---"
          echo "${{ steps.build_and_push.outputs.all_pushed_images }}" | tr ' ' '\n'
          echo "--------------------"